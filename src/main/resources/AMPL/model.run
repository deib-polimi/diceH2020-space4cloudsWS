# vim: set filetype=ampl : #

# Copyright 2014-2016 Eugenio Gianniti
# Copyright 2015 Liliane Tueguem
# Copyright 2016 Jacopo Rigoli
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#################################################
###               YARN models                 ###
#################################################

### Sets
param nAM integer >=0;
set AM := 1..nAM;
set H {AM};

### Knapsack
param bigC {i in AM, H[i]} >=0;
param nu {i in AM, H[i]} integer >=0;
param Mtilde {i in AM, H[i]} >=0;
param Vtilde {i in AM, H[i]} >=0;
param M >=0;
param V >=0;
param N integer >=0 default 1;

### Bin Packing
set P := 1..N;
param bigP {i in AM, H[i]} >=0;
param bigE >=0;
param mu >=0 := max {i in AM, j in H[i]} (max (M / Mtilde[i, j], V / Vtilde[i, j]));

### Variables
var x {i in AM, H[i]} logical;
var y {P} logical;
var n {i in AM, H[i], P} integer >=0;

### Constraints

s.t. one_x {i in AM}: sum {j in H[i]} x[i, j] = 1;
s.t. RAM: sum {i in AM, j in H[i]} (Mtilde[i, j] * nu[i, j] * x[i, j]) <= M * N;
s.t. CPU: sum {i in AM, j in H[i]} (Vtilde[i, j] * nu[i, j] * x[i, j]) <= V * N;

s.t. node_on {k in P}: sum {i in AM, j in H[i]} n[i, j, k] <= mu * y[k];
s.t. required_VMs {i in AM, j in H[i]}: sum {k in P} n[i, j, k] = nu[i, j] * x[i, j];
s.t. physical_RAM {k in P}: sum {i in AM, j in H[i]} (Mtilde[i, j] * n[i, j, k]) <= M;
s.t. physical_CPU {k in P}: sum {i in AM, j in H[i]} (Vtilde[i, j] * n[i, j, k]) <= V;
s.t. ordered_nodes {k in P: k > 1}: y[k] <= y[k - 1];

### Objectives
minimize knapsack_obj: sum {i in AM, j in H[i]} (bigC[i, j] * x[i, j]);
minimize bin_packing_obj: sum {i in AM, j in H[i]} (bigP[i, j] * x[i, j]) + sum {k in P} (bigE * y[k]);
